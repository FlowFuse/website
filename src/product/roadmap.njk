---
layout: layouts/page.njk
title: Roadmap
image: /images/product/og-product-roadmap.jpg
---

<!-- Roadmap link button section, containing a link to view the entire roadmap on GitHub. -->
<div class="px-6 -mt-32 mx-auto text-gray-400 text-center md:max-w-screen-lg -mt-40 mb-8 md:mb-40">
    <h4>
        <div class="font-semibold text-white mb-8 -mt-2">Stay up-to-date with our progress</div> 
    </h4>
    <p class="lead-p max-w-screen-lg m-auto text-center sm:max-w-xl md:px-4">
      <span style="color: #D1D5DB;">Here you can find information about upcoming features, enhancements, and other changes we're actively working on to make FlowForge an even more powerful and versatile tool for your business needs.</span>
    </p>
    <div class="text-center mt-10">
        <a href="https://github.com/orgs/flowforge/projects/5" class="inline-block ff-btn ff-btn--primary uppercase">
            <span>FULL GITHUB ROADMAP</span>
        </a>
    </div>
  </div>
{% include "components/divider-flow--top-red--light.njk" %}
<!-- Roadmap content section, divided into three columns: Consideration, In Progress, and Newly Released. Each column
has a headline, description, and a container for roadmap items. -->
<div class="about w-full bg-gray-50 pb-24 md:pb-48 md:pt-6">
    <div class="container m-auto max-w-5xl">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-x-4 -mt-32">
            <!-- Consideration Column -->
            <div class="roadmap-section consideration rounded-t-xl rounded-b-lg md:pb-0 bg-white drop-shadow-xl">
                <div class="p-6 pb-2 rounded-t-lg bg-gray-500 text-white min-h[192px]">
                    <h4 class="left-headline text-center">Under consideration</h4>
                    <hr class="border-gray-400">
                    <p>We would appreciate your feedback on the potential new features that we are considering for development.</p>
                </div>
                <div class="roadmap-item-container p-6 pt-0"></div>
            </div>
            <!-- In Progress Column -->
            <div class="roadmap-section progress rounded-t-xl rounded-b-lg md:pb-0 bg-white drop-shadow-xl">
                <div class="p-6 pb-2 rounded-t-lg bg-gray-600 text-white min-h[192px]">
                    <h4 class="left-headline text-center">In Progress</h4>
                    <hr class="border-gray-500">
                    <p>We are currently working on the following topics and would appreciate any feedback you may have.</p>
                </div>
                <div class="roadmap-item-container p-6 pt-0"></div>
            </div>
            <!-- Newly Released Column -->
            <div class="roadmap-section completed rounded-t-xl rounded-b-lg md:pb-0 bg-white drop-shadow-xl">
                <div class="p-6 pb-2 rounded-t-lg bg-gray-700 text-white min-h[192px]">
                    <h4 class="left-headline text-center">Newly released</h4>
                    <hr class="border-gray-600">
                    <p>
                        Check out product updates on
                        <a href="https://www.flowforge.com/blog/" target="_blank">
                            our blog
                        </a>
                        to see the latest features and improvements.
                    </p>
                </div>
                <!-- Newsletter sign-up form container -->
                <div class="w-full p-6 pt-3 mb-2 flex flex-col border-t">
                    <a id="sign-up"></a>
                    <h5 class="mb-8">Sign up for our monthly email updates:</h5>
                    <!-- HubSpot form script for the newsletter sign-up -->
                    <script>
                        function displayHubSpotForm() {
                            hbspt.forms.create({
                                region: "eu1",
                                portalId: "26586079",
                                formId: "159c173d-dd95-49bd-922b-ff3ef243e90c",
                                onFormSubmit: function ($form) {
                                    capture('cta-blog-subscribe', {'position': 'primary'})
                                }
                            });
                        }
                    </script>
                    <script
                        async="async"
                        type="text/javascript"
                        charset="utf-8"
                        src="//js-eu1.hsforms.net/forms/embed/v2.js"
                        onload="displayHubSpotForm()"></script>
                </div>
            </div>
        </div>
    </div>
</div>
{% include "components/divider-flow--top-red--dark.njk" %}
<!-- Roadmap feedback section, containing a header, description, and a contact button for users to provide feedback. -->
<div class="roadmap-feedback w-full ff-bg-dark px-6 pt-12 pb-24 md:pt-20 md:px-0 md:pb-48">
    <div class="container m-auto text-left max-w-4xl">
        <div>
            <h1 class="mb-4">Suggest a new feature</h1>
            <p>If you haven't found the feature you're looking for, we encourage you to provide your valuable feedback and suggestions. Your input will help us shape the future of FlowForge, ensuring it meets your needs and expectations. Please consider sharing your thoughts and ideas with us by suggesting a new feature. To do so, simply click the button below to open a new feature request on our GitHub repository.</p>
            <a href="https://github.com/flowforge/flowforge/issues/new?assignees=&labels=needs-triage%2Cfeature-request&template=03-feature.yml" class="inline-block ff-btn ff-btn--secondary shadow">Suggest a new feature</a>
        </div>
    </div>
</div>
{% include "components/divider-flow--top-grey.njk" %}
<!-- Inline JavaScript code -->
<script>
    // Utility function to send REST requests to the GitHub API.
    async function sendRESTRequest(endpoint) {
        const url = `https://api.github.com${endpoint}`;
        const options = {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "User-Agent": "FlowForge-Website"
            }
        };
        try {
            const response = await fetch(url, options);
            const data = await response.json();
            return data;
        } catch (error) {
            console.error("Error fetching GitHub issues:", error);
            return null;
        }
    }
    // Fetch GitHub issues with the specified issue label.
    async function fetchGitHubIssues(label) {
        const endpoint = `/repos/flowforge/flowforge/issues?state=open&labels=${
            encodeURIComponent(label)
        }&per_page=100`;
        const data = await sendRESTRequest(endpoint);
        return data.map(issue => ({
            title: issue.title,
            number: issue.number,
            url: issue.html_url,
            reactions: {
                totalCount: issue.reactions
                    ? issue.reactions["+1"]
                    : 0
            }
        }));
    }
    // Fetch all open milestones from the GitHub repository.
    async function fetchMilestones() {
        const endpoint = '/repos/flowforge/flowforge/milestones?state=open&per_page=10';
        const data = await sendRESTRequest(endpoint);
        return data;
    }
    // Fetch all issues with the "epic" label for the specified milestone number.
    async function fetchEpicIssuesByMilestone(milestoneNumber) {
        const endpoint = `/repos/flowforge/flowforge/issues?state=open&labels=epic&milestone=${milestoneNumber}&per_page=100`;
        const data = await sendRESTRequest(endpoint);
        return data.map(issue => ({title: issue.title, number: issue.number, url: issue.html_url}));
    }
    // Fetch all "In Progress" issues.
    async function fetchDevIssues() {
        const milestones = await fetchMilestones();
        let issues = [];
        for (const milestone of milestones) {
            const epicIssues = await fetchEpicIssuesByMilestone(milestone.number);
            issues = issues.concat(epicIssues);
        }
        return issues;
    }
    // Extract required data from the fetched data.
    async function extractIssues(data) {
        let issues = [];
        for (const milestone of data) {
            for (const issue of milestone.issues) {
                issues.push({title: issue.title, number: issue.number, url: issue.url});
            }
        }
        return issues;
    }
    // Update the roadmap sections with the fetched issues.
    async function updateRoadmap() {
        const inConsiderationItems = await fetchGitHubIssues("consideration");
        const progressItems = await fetchDevIssues();
        updateRoadmapSection(document.querySelector(".consideration"), inConsiderationItems);
        updateRoadmapSection(document.querySelector(".progress"), progressItems, false);
    }
    function updateRoadmapSection(element, items, showReactions = true) {
        // Get the container for the list of items.
        let listContainer = element.querySelector(".roadmap-item-container");
        // Create the container if it doesn't exist.
        if (! listContainer) {
            listContainer = document.createElement("div");
            listContainer.classList.add("roadmap-item-container");
            element.appendChild(listContainer);
        }
        // Create an unordered list to hold the items.
        const list = document.createElement("ul");
        // Iterate through the items and create list elements for each.
        for (const item of items) {
            // Create a list item and add the "roadmap-item" class.
            const listItem = document.createElement("li");
            listItem.classList.add("roadmap-item");
            // Create a container for the issue title and number.
            const titleNumberContainer = document.createElement("div");
            titleNumberContainer.classList.add("title-number-container");
            // Create a span element for the issue title.
            const issueName = document.createElement("span");
            issueName.classList.add("roadmap-item-text");
            issueName.textContent = item.title;
            // Add the issue title span to the container.
            titleNumberContainer.appendChild(issueName);
            listItem.appendChild(titleNumberContainer);
            // Create a left aligned wrapper for the vote button.
            const leftWrapper = document.createElement("div");
            leftWrapper.classList.add("left");
            // Create the vote button element.
            const voteBtn = document.createElement("a");
            voteBtn.href = item.url;
            voteBtn.target = "_blank";
            voteBtn.classList.add("vote-btn");
            // If showReactions is true, display the number of reactions next to the vote button.
            if (showReactions) {
                const reactions = item.reactions.totalCount;
                const reactionCount = document.createElement("span");
                reactionCount.classList.add("reaction-count");
                reactionCount.innerHTML = `👍 <span>${reactions}</span>`;
                voteBtn.innerHTML = `${
                    reactionCount.outerHTML
                }<span>Vote on GitHub</span><img src="../../images/github-mark.png" alt="GitHub Logo">`;
            } else {
                voteBtn.innerHTML = '<span>See status</span><img src="../../images/github-mark.png" alt="GitHub Logo">';
            }
            // Append the vote button to the left aligned wrapper and then append the left aligned wrapper to the list item.
            leftWrapper.appendChild(voteBtn);
            listItem.appendChild(leftWrapper);
            // Append the list item to the list.
            list.appendChild(listItem);
        }
        // Clear the previous content and append the new list.
        listContainer.innerHTML = "";
        listContainer.appendChild(list);
    }
    // Fetch and display data on page load
    updateRoadmap();
    // Fetch and display data every 5 minutes. setInterval(updateRoadmap, 5 * 60 * 1000);
</script>
