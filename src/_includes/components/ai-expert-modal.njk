<!-- AI Expert Assistant Modal -->
<div id="ai-expert-modal" class="fixed inset-0 bg-black/50 hidden items-center justify-center p-4 md:px-8 md:py-8 z-[9999]">
    <!-- Modal Content -->
    <div class="bg-white rounded-lg shadow-xl w-full max-w-4xl h-full md:h-full flex flex-col relative">
        
        <!-- Header -->
        <div class="ai-chat-box"><div class="textarea-wrapper modal-header flex items-center justify-between px-4 py-3 rounded-t-lg h-auto rounded-b-none mb-0">
            <div class="flex items-center gap-1">
                <!-- FlowFuse Logo -->
                <div class="w-24 h-6">
                    {% include "components/flowfuse-wordmark.njk" %}
                </div>
                <h2 class="text-base font-semibold text-gray-700" style="margin-bottom: -3px;">Expert Assistant</h2>
            </div>
            <button id="close-modal" class="text-gray-400 hover:text-gray-600">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                    <path d="M18 6L6 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
        </div></div>

        <!-- Chat Content -->
        <div class="flex-1 p-4 overflow-y-auto">
            <!-- Info Message -->
            <div class="bg-indigo-100 rounded-lg mb-6" style="padding: 10px 16px;">
                <p class="text-indigo-700 text-sm m-0">
                    Uses OpenAI GPT-4.1 Mini with access to all FlowFuse 
                    <a href="/docs" class="underline">documentation</a> 
                    and our Get Started 
                    <a href="https://www.youtube.com/watch?v=K4xw09DbSdI&list=PLpcyqc7kNgp1dCDliNM4WOPf6d42Qmjvf" class="underline">YouTube playlist</a>
                </p>
            </div>

            <!-- Chat Messages Container -->
            <div id="chat-messages" class="space-y-4">
                <!-- Messages will be added here dynamically -->
            </div>

        </div>

        <!-- Stop Button -->
        <div id="stop-button-container" class="px-4 pt-4 border-t border-gray-200 flex justify-end hidden">
            <button id="stop-generation" class="bg-white border border-indigo-300 rounded-full text-sm flex items-center gap-2" style="padding: 8px 10px;">
                <div class="w-3 h-3 bg-gray-800 rounded-sm"></div>
                Stop
            </button>
        </div>

        <!-- Input Area -->
        <div class="p-4 bg-white rounded-b-lg">
            <div class="relative">
                <textarea 
                    id="modal-input"
                    placeholder="Give more details to modify the guide and tailor it further to your use case"
                    class="w-full p-4 border-2 border-gray-300 rounded-lg resize-none focus:outline-none focus:border-indigo-500 text-gray-900"
                    style="height: 100px; font-size: 14px;"
                ></textarea>
            </div>
            <div class="flex justify-between mt-2 text-xs text-gray-500">
                <span>Powered by OpenAI</span>
                <span>Rate limited. Fair use only</span>
            </div>
        </div>

    </div>
</div>

<!-- JavaScript for Modal Functionality -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('ai-expert-modal');
    const closeBtn = document.getElementById('close-modal');
    const tellMeHowBtn = document.querySelector('[onclick*="cta-ai-tell-me-how"]');
    const chatMessages = document.getElementById('chat-messages');
    const modalInput = document.getElementById('modal-input');

    // Open modal
    if (tellMeHowBtn) {
        tellMeHowBtn.addEventListener('click', function(e) {
            e.preventDefault();
            const userText = document.querySelector('textarea[aria-label="Describe your workflow"]').value;
            openModal(userText);
        });
    }

    // Close modal
    closeBtn.addEventListener('click', closeModal);
    modal.addEventListener('click', function(e) {
        if (e.target === modal) closeModal();
    });

    function openModal(userText) {
        // Check if View Transitions API is supported
        if (document.startViewTransition && typeof document.startViewTransition === 'function') {
            
            // Get elements for transition
            const homeTextarea = document.querySelector('textarea[aria-label="Describe your workflow"]');
            const homeTextareaWrapper = homeTextarea.closest('.textarea-wrapper');
            // Target the entire input area div that contains textarea and footer text
            const modalInputSection = modal.querySelector('.p-4.bg-white.rounded-b-lg');
            
            
            // Set transition name on home wrapper BEFORE starting transition (for "before" snapshot)
            homeTextareaWrapper.style.viewTransitionName = 'morphing-content';
            
            // Use View Transitions API for smooth morphing
            try {
                const transition = document.startViewTransition(() => {
                    
                    // Remove transition name from home wrapper
                    homeTextareaWrapper.style.viewTransitionName = '';
                    
                    // Hide the home wrapper
                    homeTextareaWrapper.style.display = 'none';
                    
                    // Move modal to document.body and show it
                    document.body.appendChild(modal);
                    modal.classList.remove('hidden');
                    modal.classList.add('flex');
                    
                    // Give the modal input section the transition name (for "after" snapshot)
                    modalInputSection.style.viewTransitionName = 'morphing-content';
                    
                });
                
            
            transition.finished.then(() => {
                
                // Prevent body scroll
                document.body.style.overflow = 'hidden';
                
                // Clean up transition names after animation
                homeTextareaWrapper.style.viewTransitionName = '';
                modalInputSection.style.viewTransitionName = '';
                
                // Start chat after transition completes
                if (userText) {
                    startChat(userText);
                }
            }).catch(err => {
                console.error('Transition failed:', err);
            });
            } catch (error) {
                console.error('Error starting transition:', error);
                // Fallback to immediate modal show
                homeTextareaWrapper.style.display = 'none';
                document.body.appendChild(modal);
                modal.classList.remove('hidden');
                modal.classList.add('flex');
                document.body.style.overflow = 'hidden';
                if (userText) {
                    modalInput.value = userText;
                    startChat(userText);
                }
            }
        } else {
            // Fallback for browsers without View Transitions support
            const homeTextarea = document.querySelector('textarea[aria-label="Describe your workflow"]');
            const homeTextareaWrapper = homeTextarea.closest('.textarea-wrapper');
            
            
            // Hide home textarea to avoid duplication
            homeTextareaWrapper.style.display = 'none';
            
            // Show modal immediately (no animation)
            document.body.appendChild(modal);
            modal.classList.remove('hidden');
            modal.classList.add('flex');
            document.body.style.overflow = 'hidden';
            
            if (userText) {
                startChat(userText);
            }
        }
    }

    function closeModal() {
        const homeTextarea = document.querySelector('textarea[aria-label="Describe your workflow"]');
        const homeTextareaWrapper = homeTextarea ? homeTextarea.closest('.textarea-wrapper') : null;
        const modalInputSection = modal.querySelector('.p-4.bg-white.rounded-b-lg');
        
        // Check if View Transitions API is supported
        if (document.startViewTransition && typeof document.startViewTransition === 'function') {
            // Set transition name on modal input section (for "before" snapshot)
            modalInputSection.style.viewTransitionName = 'morphing-content';
            
            // Use View Transitions for smooth reverse morph
            const transition = document.startViewTransition(() => {
                // Remove transition name from modal
                modalInputSection.style.viewTransitionName = '';
                
                // Hide modal
                modal.classList.add('hidden');
                modal.classList.remove('flex');
                
                // Show home wrapper with transition name (for "after" snapshot)
                if (homeTextareaWrapper) {
                    homeTextareaWrapper.style.display = '';
                    homeTextareaWrapper.style.viewTransitionName = 'morphing-content';
                }
            });
            
            transition.finished.then(() => {
                // Clean up after transition
                document.body.style.overflow = '';
                if (homeTextareaWrapper) {
                    homeTextareaWrapper.style.viewTransitionName = '';
                }
                
                // Reset modal state
                chatMessages.innerHTML = '';
                modalInput.value = '';
                
                // Hide stop button container
                const stopButtonContainer = document.getElementById('stop-button-container');
                stopButtonContainer.classList.add('hidden');
            });
        } else {
            // Fallback for browsers without View Transitions
            modal.classList.add('hidden');
            modal.classList.remove('flex');
            document.body.style.overflow = '';
            
            // Restore home textarea
            if (homeTextareaWrapper) {
                homeTextareaWrapper.style.display = '';
            }
            
            // Reset state
            chatMessages.innerHTML = '';
            modalInput.value = '';
            
            // Hide stop button container
            const stopButtonContainer = document.getElementById('stop-button-container');
            stopButtonContainer.classList.add('hidden');
        }
        
    }

    function startChat(message) {
        // Show stop button container when chat starts
        const stopButtonContainer = document.getElementById('stop-button-container');
        stopButtonContainer.classList.remove('hidden');
        
        // Add user message
        addMessage(message, 'user');
        
        // Add assistant response immediately
        setTimeout(() => {
            addMessage('I can help you set up FlowFuse on a Siemens IOT2050. Here\'s a comprehensive guide...', 'assistant');
        }, 500);
    }

    function addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `flex ${sender === 'user' ? 'justify-end' : 'justify-start'} mb-4`;
        
        const messageBubble = document.createElement('div');
        messageBubble.className = `max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
            sender === 'user' 
                ? 'bg-indigo-600 text-white rounded-br-sm' 
                : 'bg-gray-100 text-gray-800 rounded-bl-sm'
        }`;
        messageBubble.textContent = text;
        
        messageDiv.appendChild(messageBubble);
        chatMessages.appendChild(messageDiv);
        
        // Scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Stop generation
    document.getElementById('stop-generation').addEventListener('click', function() {
        // Stop functionality can be implemented here if needed
    });

    // Enter key to send message
    modalInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            const message = modalInput.value.trim();
            if (message) {
                startChat(message);
                modalInput.value = '';
            }
        }
    });
});
</script>