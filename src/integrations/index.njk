---
layout: default
sitemapPriority: 0.9
pagination:
  data: integrations
  size: 30
  addAllPagesToCollections: true
title: Integrations
description:
  Explore the list of integrations and modules available for your Node-RED projects. Created (and curated) by FlowFuse and the Node-RED community.
meta:
    title: Integrations
---

{% extends 'layouts/catalog.njk' %}

{% block title %}
Integrations
{% endblock %}

{% block description %}
Explore FlowFuse Blueprints, choose templates for quick setups, perfect for learning and fast solution-building. Customizable for unique needs. Simplify your Node-RED projects with FlowFuse Blueprints!
{% endblock %}

{% block content %}
<script>
    const pagination = {
        perPage: 30,
        currentPage: 0,
        maxPages: 0
    }
    let filterCertified = false;
    const filters = {
        ai: {
            checked: false,
            label: 'AI'
        },
        communication: {
            checked: false,
            label: 'Communication'
        },
        'data-and-analytics': {
            checked: false,
            label: 'Data & Analysis'
        },
        database: {
            checked: false,
            label: 'Database'
        },
        hardware: {
            checked: false,
            label: 'Hardware'
        },
        'home-automation': {
            checked: false,
            label: 'Home Automation'
        },
        industrial: {
            checked: false,
            label: 'Industrial'
        },
        security: {
            checked: false,
            label: 'Security'
        },
        storage: {
            checked: false,
            label: 'Storage'
        },
        tools: {
            checked: false,
            label: 'Tools'
        },
        ui: {
            checked: false,
            label: 'UI'
        },
        utility: {
            checked: false,
            label: 'Utility'
        }
    }
    var catalogue = []

    function renderFilters () {
        const ul = document.getElementById('catalogue-filter--categories')
        
        Object.keys(filters).forEach(key => {
            const li = document.createElement('li');
            li.innerHTML = `<input id="catalogue-filter-${key}" type="checkbox" onchange="toggleFilter('${key}')"><label for="catalogue-filter-${key}">${filters[key].label}</label>`
            ul.appendChild(li)
        })
    }

    async function loadCatalogue () {
        await fetch('https://ff-integrations.flowfuse.cloud/api/nodes')
            .then(response => response.json())
            .then(data => {
                catalogue = data.catalogue
                pagination.maxPage = Math.ceil(catalogue.length / pagination.perPage);
                renderFilters();
                filterCatalogue(catalogue);
            });
    }
    loadCatalogue()

    function updateUI (nodes) {
        // update the nodes counters
        document.getElementById('integrations-count').innerHTML = nodes.length;

        // pagination
        document.getElementById('pagination-current').innerHTML = pagination.currentPage + 1;
        document.getElementById('pagination-max').innerHTML = pagination.maxPage;

        if (pagination.currentPage === 0) {
            document.getElementById('pagination-previous').classList.add('opacity-0', 'pointer-events-none');
        } else {
            document.getElementById('pagination-previous').classList.remove('opacity-0', 'pointer-events-none');
        }

        if (pagination.currentPage + 1 === pagination.maxPage) {
            document.getElementById('pagination-next').classList.add('opacity-0', 'pointer-events-none');
        } else {
            document.getElementById('pagination-next').classList.remove('opacity-0', 'pointer-events-none');
        }

        // render tiles
        showPage(nodes);
    }

    function changePage (diff) {
        if ( pagination.currentPage + diff < 0 || pagination.currentPage + diff > pagination.maxPage) {
            return;
        }
        pagination.currentPage += diff;
        updateUI(catalogue);
    }

    function showPage (catalogue) {
        const tiles = document.getElementById('integration-tiles');
        tiles.innerHTML = '';
        const onPage = catalogue.slice(pagination.currentPage * pagination.perPage, (pagination.currentPage + 1) * pagination.perPage); 
        onPage.forEach(node => {
            const tile = document.createElement('integration-tile');
            tile.setAttribute('integration', JSON.stringify(node));
            tiles.appendChild(tile);
        })
    }

    function toggleFilter (key) {
        filters[key].checked = document.getElementById(`catalogue-filter-${key}`).checked;
        filterCatalogue();
    }

    function toggleCertified () {
        filterCertified = document.getElementById('catalogue-filter-certified').checked;
        filterCatalogue();
    }


    function filterCatalogue () {
        const search = document.getElementById('search-catalogue').value;
        const filtered = catalogue.filter(node => {
            let hasCategories = true
            // loop over categories
            Object.keys(filters).forEach(key => {
                const filter = filters[key];
                if (filter.checked && !node.categories.includes(key)) {
                    hasCategories = false
                }
            })
            // check if certified is checked
            if (filterCertified && !node.ffCertified) {
                hasCategories = false
            }
            return node._id.includes(search) && hasCategories
        }).sort((a, b) => {
            // sort by FF Certified first
            if (a.ffCertified && !b.ffCertified) {
                return -1
            }
            if (!a.ffCertified && b.ffCertified) {
                return 1
            }
            return new Date(b.updatedAt) - new Date(a.updatedAt);
        });
        pagination.maxPage = Math.ceil(filtered.length / pagination.perPage);
        
        if (pagination.currentPage > pagination.maxPage) {
            pagination.currentPage = pagination.maxPage;
        }
        updateUI(filtered);
    }

    function truncate (words, amount) {
        // split the description
        const tokens = words?.split(' ') || []
        const trimmed = tokens?.slice(0, amount) || []
        return trimmed.join(' ') + (tokens.length > amount ? '...' : '')
    }

    class IntegrationTile extends HTMLElement {
        static observedAttributes = ["integration"];

        constructor() {
            super();
            // defaults
            this.integration = {}
        }

        attributeChangedCallback(name, oldValue, newValue) {
            // handle setting of the value
            if (name === "integration") {
                this.integration = JSON.parse(newValue);
            }
        }
        
        connectedCallback () {
            const integration = this.integration || {};
            const description = truncate(integration.description, 15) || '';
            const certified = integration.ffCertified || false;
            this.innerHTML = `
                <li class="integration-card border border-gray-300 rounded-xl bg-white drop-shadow-md">
                    <a href="/integrations/nodes/${integration._id}" class="h-48 flex flex-col">
                        <div class="integration-card--details p-3 grow min-h-0">
                            <div class="flex justify-between text-sm items-center">
                                <span>@${integration.npmScope || integration.npmOwners[0]}</span>
                                <span class="ff-certified-tag" style="display: ${certified ? 'flex' : 'none'}">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
  <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12c0 1.268-.63 2.39-1.593 3.068a3.745 3.745 0 01-1.043 3.296 3.745 3.745 0 01-3.296 1.043A3.745 3.745 0 0112 21c-1.268 0-2.39-.63-3.068-1.593a3.746 3.746 0 01-3.296-1.043 3.745 3.745 0 01-1.043-3.296A3.745 3.745 0 013 12c0-1.268.63-2.39 1.593-3.068a3.745 3.745 0 011.043-3.296 3.746 3.746 0 013.296-1.043A3.746 3.746 0 0112 3c1.268 0 2.39.63 3.068 1.593a3.746 3.746 0 013.296 1.043 3.746 3.746 0 011.043 3.296A3.745 3.745 0 0121 12z" />
</svg>Certified</span>
                            </div>    
                            <label>${integration.name}</label>
                            <p class="text-sm my-2 leading-5">${description}</p>
                        </div>
                        <div class="integration-card--meta flex justify-between bg-indigo-50 p-3 text-sm">
                            <div class="integration-card--stats">
                                <span>v${integration.version}</span>
                                <span class="flex items-center gap-1">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M12 9.75v6.75m0 0-3-3m3 3 3-3m-8.25 6a4.5 4.5 0 0 1-1.41-8.775 5.25 5.25 0 0 1 10.233-2.33 3 3 0 0 1 3.758 3.848A3.752 3.752 0 0 1 18 19.5H6.75Z" />
</svg>${integration.downloads.week}</span>
                            </div>
                        </div>
                    </a>
                </li>`;
        }
    }
    customElements.define('integration-tile', IntegrationTile);
</script>

<div class="container m-auto text-left max-w-lg md:max-w-6xl pt-8 pb-12 w-full ff-full-bg gap-4 flex">
    <div class="catalogue-filters w-52 shrink-0">
        <label>Filters</label>
        <ul>
            <li><input type="checkbox" id="catalogue-filter-certified" onchange="toggleCertified()"/><label for="catalogue-filter-certified">FlowFuse Certified</label></li>
        </ul>
        <label>Categories</label>
        <ul id="catalogue-filter--categories"></ul>
    </div>
    <div class="grow">
        <input id="search-catalogue" class="catalogue-search" type="text" placeholder="Search Integrations" onkeyup="filterCatalogue()" onchange="filterCatalogue()"/>
        <div class="catalogue-meta">
            <div><span id="integrations-count">X</span> Integrations</div>
        </div>
        <ul id="integration-tiles" class="grid grid-cols-3 gap-3"></ul>
        <nav aria-labelledby="pagination" class="pagination mt-4">
            <ol class="flex flex-row w-full justify-between text-gray-600">
                <li id="pagination-previous" class="flex md:flex-initial w-40 justify-start pl-2 ff-nav-blog-p" onclick="changePage(-1)">Previous</li>
                <li>
                    <span id="pagination-current">X</span> of <span id="pagination-max">Y</span>
                </li>
                <li id="pagination-next" class="flex md:flex-initial w-40 justify-end pr-2 ff-nav-blog-n" onclick="changePage(1)">Next</li>
            </ol>
        </nav>
    </div>
</div>
{% endblock %}

<script>
    renderFilters()
</script>