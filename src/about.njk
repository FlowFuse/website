---
layout: layouts/page.njk
title: About FlowForge
description: "<p>Founded by the co-creator of Node-RED, Nick O'Leary, FlowForge is an open core company creating a platform that helps customers running Node-RED in production environments.</p>
<p>We're still in our infancy, but here is a bit about who are are, our journey so far in and how we operate.</p>"
heroimg: "../images/pictograms/anvil1.png"
sitemapPriority: 0.7
---

<script type="module">

import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";
import { transition } from "https://cdn.skypack.dev/d3-transition@3";

const timeline = [{
    "date": "April '21",
    "title": "FlowForge Formed"
},{
    "date": "May '21",
    "title": "Our First Hire"
}, {
    "date": "Jan '22",
    "title": "v0.1 Released"
}, {
    "date": "Feb '22",
    "title": "FlowForge Cloud"
}, {
    "date": "May '22",
    "title": "UX Revamp"
}, {
    "date": "Aug '22",
    "title": "Project Link Nodes"
}, {
    "date": "Aug '22",
    "title": "Static Outbound IP Addresses"
}, {
    "date": "Aug '22",
    "title": "v1.0 Released!"
}, {
    "date": "Dec '22",
    "title": "SSO Added"
}, {
    "date": "View Roadmap",
    "title": "What's Next..."
}] 

const journey = d3.selectAll("#journey");
const svg = journey.select("svg");
const canvas = journey.select("div#canvas");

svg.on('load', () => {

    const width = svg.node().clientWidth
    const height = svg.node().clientHeight

    let dTimeline = [];
    // break the timeline into rows
    let dRows = []
    let aRow =[] // track active row
    let rows = 0
    for (let i = 0; i < timeline.length; i++) {
        let entry = timeline[i]
        entry.index = i
        if (i === 0) {
            aRow.push('node')
            aRow.push(entry)
        } else if ((i+1)%4 === 0) {
            // we have a solo row
            // finish previous row
            aRow.push('node')
            dRows.push(aRow)
            dRows.push([
                entry
            ])
            if (i !== timeline.length - 1) {
                aRow = ['node']
            } else {
                aRow = []
            }
        } else {
            aRow.push(entry)
        }
    }
    // if leftover content in a row
    if (aRow.length > 0) {
        dRows.push(aRow)
    }

    const domRows = canvas.select('#rows')

    const domRow = domRows.selectAll('div')
        .data(dRows)
        .enter()
        .append('div')
        .classed('journey-row', true)
        .classed('journey-row--left', (d, i) => {
            // single item rows: i = 1, 5, 9, 13, etc.
            return ((i + 1)/2)%2 === 0 && d.length === 1 
        })
        .classed('journey-row--right', (d, i) => {
            // i = 1, 5, 9, 13, etc.
            return ((i + 1)/2)%2 === 1 && d.length === 1 
        })
        .classed('journey-row--reversed', (d, i) => {
            // when moving from right-to-left
            // i = 2, 6, 10, 14
            return ((i/2)%2 === 1) && d.length > 1
        })

    const reveal = transition().duration(2000)
    
    const node = domRow.selectAll('div')
        .data((d) => {
            return d
        })
        .enter()
        .append('div')
        .classed('node', true)
        .style('opacity', 0)

    const fNodes = node.filter((d) => {
        return d !== 'node'
    })

    fNodes.attr('class', (d, i) => {
        // need to work from filtered i value
        if ((d.index + 1)%4 === 0) {
            // row with single node
            if ((d.index - 3 % 8) === 0) {
                return 'node flex flex-row-reverse gap-4 w-1/3 items-center justify-start my-12'
            } else {
                return 'node flex flex-row gap-4 w-1/3 items-center justify-start my-24'
            }
        } else {
            return 'node flex flex-col w-1/3 items-center justify-center'
        }
    })
    fNodes.append('span')
        .attr('class', 'border-4 border-black rounded bg-white block')
        .style('width', '24px')
        .style('height', '24px')

    const label = fNodes.append('label')
        .attr('class', (d, i) => {
            if ((d.index + 1)%4 === 0) {
                if ((d.index - 3 % 8) === 0) {
                    return 'text-right'
                } else {
                    return 'text-left'
                }
            } else {
                return ''
            }
        })

    label.append('span')
        .attr('class', 'font-bold block')
        .text((d, i) => {
            return d.title
        })
    
    label.filter((d) => {
            return d.title !== "What's Next..."
        }).append('span')
        .attr('class', 'font-light block')
        .text((d) => {
            return d.date
        })

    label.filter((d) => {
            return d.title === "What's Next..."
        }).append('a')
        .attr('class', 'block')
        .attr('href', 'https://github.com/orgs/flowforge/projects/5')
        .attr('target', '_blank')
        .text((d) => {
            return d.date
        })
    

    node.transition()
        .delay((d, i) => {
            return d.index * 300
        })
        .duration(1000)
        .style('opacity', 1)
    
    const links = svg.select('g#links')


    var line = d3.line()
        .x(function(d, i) {
            // i counter includes the empty nodes
            const bbox = d.getBoundingClientRect()
            const x = (bbox.width / 2) + bbox.left - d.parentElement.getBoundingClientRect().left;
            if ((i+1)%6 === 0) {
                // we have a single element on it's own row
                if ((i - 5) % 12 === 0) {
                    return x + (bbox.width / 2) - 12
                } else {
                    return x - (bbox.width / 2) + 12
                }
            } else {
                return x
            }
        })
        .y(function(d, i) {
            d = d.parentElement
            const bbox = d.getBoundingClientRect()
            const y = bbox.top - d.parentElement.getBoundingClientRect().top;
            if ((i+1)%6 === 0) {
                // we have a single element on it's own row
                return y + (bbox.height / 2)
            } else if ((i+6)%12 < 5) {
                // nodes inside a reversed row 6 -> 10, 18 -> 22, 30 -> 34
                return y + (bbox.height) - 12
            } else {
                // shift the y coordinate down the height of the node box
                return 12 + y
            }
            
        })
        .curve(d3.curveBasis);

    const gradient = d3.scaleLinear()
        .domain([0, 0.7, 1])
        .range(['white', '#D12B2B', 'black']);

    // calculate base path 
    let path = svg.append("path")
        .style('stroke', 'black')
        .style('stroke-width', '1px')
        .style('fill', 'none')
        .datum(node)
        .attr("d", line);
    
    path = path.remove()
    
    // convert to gradient path
    const gradientPath = svg.select('#path').selectAll('path')
        .data(quads(samples(path.node(), 4)))
        .enter().append('path')
        .attr('d', function (d) {
            return lineJoin(d[0], d[1], d[2], d[3], 8);
        })
    
    gradientPath
        .style('opacity', 0)
        .style('fill', (d) => {
            return 'black'
        })
        .style('stroke', (d) => {
            return 'black'
        })
        .transition()
        .delay((d, i) => {
            return d.t * 3000
        })
        .duration(1000)
        .style('opacity', 1)
        .style('fill', (d) => {
            return gradient(d.t)
        })
        .style('stroke', (d) => {
            return gradient(d.t)
        })

    /* Line Gradient & Animation */
    // Sample the SVG path uniformly with the specified precision.
    function samples(path, precision) {
        var n = path.getTotalLength(), t = [0], i = 0, dt = precision;
        while ((i += dt) < n) t.push(i);
        t.push(n);
        return t.map(function(t) {
            var p = path.getPointAtLength(t), a = [p.x, p.y];
            a.t = t / n;
            return a;
        });
    }

    // Compute quads of adjacent points [p0, p1, p2, p3].
    function quads(points) {
        return d3.range(points.length - 1).map(function(i) {
            var a = [points[i - 1], points[i], points[i + 1], points[i + 2]];
            a.t = (points[i].t + points[i + 1].t) / 2;
            return a;
        });
    }
    // Compute stroke outline for segment p12.
    function lineJoin(p0, p1, p2, p3, width) {
        var u12 = perp(p1, p2),
            r = width / 2,
            a = [p1[0] + u12[0] * r, p1[1] + u12[1] * r],
            b = [p2[0] + u12[0] * r, p2[1] + u12[1] * r],
            c = [p2[0] - u12[0] * r, p2[1] - u12[1] * r],
            d = [p1[0] - u12[0] * r, p1[1] - u12[1] * r];

        if (p0) { // clip ad and dc using average of u01 and u12
            var u01 = perp(p0, p1), e = [p1[0] + u01[0] + u12[0], p1[1] + u01[1] + u12[1]];
            a = lineIntersect(p1, e, a, b);
            d = lineIntersect(p1, e, d, c);
        }

        if (p3) { // clip ab and dc using average of u12 and u23
            var u23 = perp(p2, p3), e = [p2[0] + u23[0] + u12[0], p2[1] + u23[1] + u12[1]];
            b = lineIntersect(p2, e, a, b);
            c = lineIntersect(p2, e, d, c);
        }

        return "M" + a + "L" + b + " " + c + " " + d + "Z";
    }

    // Compute intersection of two infinite lines ab and cd.
    function lineIntersect(a, b, c, d) {
        var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3,
            y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3,
            ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
        return [x1 + ua * x21, y1 + ua * y21];
    }

    // Compute unit vector perpendicular to p01.
    function perp(p0, p1) {
        var u01x = p0[1] - p1[1], u01y = p1[0] - p0[0],
            u01d = Math.sqrt(u01x * u01x + u01y * u01y);
        return [u01x / u01d, u01y / u01d];
    }
})

</script>

{% include "components/divider-flow--default.njk" %}

<!-- Company Values -->
<div class="about w-full ff-bg-light pt-12 pb-24 md:pb-48 md:pt-48">
    <div class="container m-auto text-center max-w-4xl">
        <h1>Our Journey So Far...</h1>
        <div id="journey" class="relative mt-12">
            <svg class="absolute w-full h-full top-0 left-0">
                <g id="links"></g>
                <g id="path"></g>
            </svg>
            <div id="canvas" class="relative">
                <div id="rows" class=""></div>
            </div>
        </div>
    </div>
</div>

<!-- Secondary Content -->
<div class="about w-full ff-bg-light pt-12 pb-24 md:pb-48 md:pt-32">
    <div class="container m-auto text-center max-w-4xl">
        <div class="grid grid-cols-1 md:grid-cols-2 pt-12 md:flex-row md:pt-24">
            <div class="highlight-feature pb-6 md:pb-0">
                <h3>Node-RED</h3>
                <img src="../images/node-red-hexagon.png" />
                <p>Node-RED is an industry leading low-code platform that makes it easy to build applications that integrate events, data and devices. It provides the core of what we're building at FlowForge.</p>
                <p>Read our <a href="/node-red">What is Node-RED guide</a> to find out more.</p>
            </div>
            <div class="highlight-feature">
                <h3>Open Source</h3>
                <img src="../images/pictograms/opensource_red.png" />
                <p>We believe strongly that Open Source lives at the heart of everything we do - both in our work to push the Node-RED project forward as well as our own FlowForge platform.</p>
                <p>We strive to be good Open Source citizens and want to empower the community to get involved.</p>
            </div>
        </div>
    </div>
</div> 

{% include "components/divider-flow--top-red--dark.njk" %}


{% include "components/divider-flow--top-grey.njk" %}

<!-- Employee Benefits -->
<div class="about w-full ff-bg-mid px-6 pt-12 pb-20 md:px-0 md:pt-20">
    <div class="container m-auto text-center max-w-4xl">
        
    </div>
</div>